- // MIR for `f` before InstCombine
+ // MIR for `f` after InstCombine
  
  fn f(_1: &T) -> *const T {
      debug a => _1;                       // in scope 0 at $DIR/issue-78192.rs:3:13: 3:14
      let mut _0: *const T;                // return place in scope 0 at $DIR/issue-78192.rs:3:23: 3:31
      let _2: &*const T;                   // in scope 0 at $DIR/issue-78192.rs:4:9: 4:10
      let _3: &*const T;                   // in scope 0 at $DIR/issue-78192.rs:4:24: 4:40
      let _4: *const T;                    // in scope 0 at $DIR/issue-78192.rs:4:25: 4:40
      scope 1 {
          debug b => _2;                   // in scope 1 at $DIR/issue-78192.rs:4:9: 4:10
      }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/issue-78192.rs:4:9: 4:10
          StorageLive(_3);                 // scope 0 at $DIR/issue-78192.rs:4:24: 4:40
          StorageLive(_4);                 // scope 0 at $DIR/issue-78192.rs:4:25: 4:40
          _4 = &raw const (*_1);           // scope 0 at $DIR/issue-78192.rs:4:26: 4:27
          _3 = &_4;                        // scope 0 at $DIR/issue-78192.rs:4:24: 4:40
-         _2 = &(*_3);                     // scope 0 at $DIR/issue-78192.rs:4:24: 4:40
+         _2 = _3;                         // scope 0 at $DIR/issue-78192.rs:4:24: 4:40
          StorageDead(_3);                 // scope 0 at $DIR/issue-78192.rs:4:40: 4:41
          _0 = (*_2);                      // scope 1 at $DIR/issue-78192.rs:5:5: 5:7
          StorageDead(_4);                 // scope 0 at $DIR/issue-78192.rs:6:1: 6:2
          StorageDead(_2);                 // scope 0 at $DIR/issue-78192.rs:6:1: 6:2
          return;                          // scope 0 at $DIR/issue-78192.rs:6:2: 6:2
      }
  }
  
